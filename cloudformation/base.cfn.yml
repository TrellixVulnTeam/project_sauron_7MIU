AWSTemplateFormatVersion: '2010-09-09'
Description: 'Base Template for deploying a dockerized application'
Mappings:
  EnvironmentSettings:
    Dev-Alpha:
      BillingEnvironment: 'dev'
      SecurityGroups: 'sg-6c8a911b'
      SubnetAZ1: 'subnet-5c4a6c2a'
      SubnetAZ2: 'subnet-2e4e3c76'
      SubnetAZ3: 'subnet-d21067f8'
      SubnetAZ4: 'subnet-af765192'
      TargetVpcId: 'vpc-6b3cfe0c'
      DnsZoneName: 'mldev.cloud.'
      Certificate: 'arn:aws:acm:us-east-1:999447569257:certificate/f52216d5-601a-45b8-9748-939b8356f1b0'
    Integration-Alpha:
      BillingEnvironment: 'qa'
      SecurityGroups: 'sg-6c8a911b'
      SubnetAZ1: 'subnet-5c4a6c2a'
      SubnetAZ2: 'subnet-2e4e3c76'
      SubnetAZ3: 'subnet-d21067f8'
      SubnetAZ4: 'subnet-af765192'
      TargetVpcId: 'vpc-6b3cfe0c'
      DnsZoneName: 'mldev.cloud.'
      Certificate: 'arn:aws:acm:us-east-1:999447569257:certificate/f52216d5-601a-45b8-9748-939b8356f1b0'
    Prod-Delta:
      BillingEnvironment: 'prod'
      SecurityGroups: 'sg-4598c334'
      SubnetAZ1: 'subnet-1c612a6a'
      SubnetAZ2: 'subnet-84cbaddc'
      SubnetAZ3: 'subnet-34613109'
      SubnetAZ4: 'subnet-c3dc44e9'
      TargetVpcId: 'vpc-fe769c99'
      DnsZoneName: 'macmillantech.com.'
      Certificate: 'arn:aws:acm:us-east-1:517541443881:certificate/2d7c6589-51a9-4368-b52a-bccc60f51f61'

Parameters:
  Swarm:
    Description: 'Docker Swarm Cluster to use'
    Type: String
  PublishPort:
    Description: 'Port Application is exposing'
    Type: Number
  BillingDivision:
    Type: String
  BillingProject:
    Type: String
  BillingEnvId:
    Type: String
  BillingRole:
    Type: String
  TargetGroupTags:
    Type: CommaDelimitedList
  AppLoadBalancerScheme:
    Description: 'Specifies if the Load Balancer is internal or internet-facing'
    Type: String
    Default: 'internet-facing'
    AllowedValues:
      - 'internal'
      - 'internet-facing'

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: "/status"
      Protocol: HTTP
      Port: !Ref PublishPort
      VpcId: !FindInMap [ EnvironmentSettings, !Ref Swarm, TargetVpcId ]
      Name: !Ref 'AWS::StackName'
      Tags:
        - Key: swarm
          Value: !Ref Swarm
        - Key: PublishPort
          Value: !Ref PublishPort
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref 'AWS::StackName'
      Scheme: !Ref AppLoadBalancerScheme
      SecurityGroups:
        - !FindInMap [ EnvironmentSettings, !Ref Swarm, SecurityGroups ]
      Subnets:
        - !FindInMap [ EnvironmentSettings, !Ref Swarm, SubnetAZ1 ]
        - !FindInMap [ EnvironmentSettings, !Ref Swarm, SubnetAZ2 ]
        - !FindInMap [ EnvironmentSettings, !Ref Swarm, SubnetAZ3 ]
        - !FindInMap [ EnvironmentSettings, !Ref Swarm, SubnetAZ4 ]      
      Tags:
        - Key: division 
          Value: !Ref BillingDivision
        - Key: project 
          Value: !Ref BillingProject
        - Key: environment 
          Value: !FindInMap [ EnvironmentSettings, !Ref Swarm, BillingEnvironment ]
        - Key: envid 
          Value: !Ref BillingEnvId
        - Key: role
          Value: !Ref BillingRole
  AppLoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: AppLoadBalancer
      Port: '80'
      Protocol: HTTP
  AppLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !FindInMap [ EnvironmentSettings, !Ref Swarm, Certificate ]
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: AppLoadBalancer
      Port: '443'
      Protocol: HTTPS
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget: 
        DNSName: !GetAtt AppLoadBalancer.DNSName
        HostedZoneId: !GetAtt AppLoadBalancer.CanonicalHostedZoneID
      Name: !Join ['.', [!Ref 'AWS::StackName', !FindInMap [ EnvironmentSettings, !Ref Swarm, DnsZoneName ]]]
      Type: 'A'
      HostedZoneName: !FindInMap [ EnvironmentSettings, !Ref Swarm, DnsZoneName ]

Outputs:
  StackUrl:
    Description: Url to Deployed Stack
    Value: !Join ['', ['https://', !Ref 'DNSRecord']]